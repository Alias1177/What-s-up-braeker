package main

import (
	"context"
	"fmt"
	"os"
	"time"

	_ "github.com/mattn/go-sqlite3"
	"github.com/mdp/qrterminal/v3"
	"go.mau.fi/whatsmeow"
	waProto "go.mau.fi/whatsmeow/binary/proto"
	"go.mau.fi/whatsmeow/store/sqlstore"
	"go.mau.fi/whatsmeow/types"
	"go.mau.fi/whatsmeow/types/events"
	waLog "go.mau.fi/whatsmeow/util/log"
	"google.golang.org/protobuf/proto"
)

var lastMessages []string

func main() {
	// –õ–æ–≥–≥–µ—Ä
	log := waLog.Stdout("Client", "INFO", true)
	ctx := context.Background()

	//–ë–î —Å–µ—Å—Å–∏–π
	container, err := sqlstore.New(ctx, "sqlite3", "file:whatsapp.db?_foreign_keys=on", log)
	if err != nil {
		panic(err)
	}

	deviceStore, err := container.GetFirstDevice(ctx)
	if err != nil {
		panic(err)
	}

	client := whatsmeow.NewClient(deviceStore, log)

	//–†—É—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	client.AddEventHandler(func(evt interface{}) {
		switch v := evt.(type) {
		case *events.Message:
			sender := "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"
			if v.Info.IsFromMe {
				sender = "–¢—ã"
			}

			text := v.Message.GetConversation()
			if text == "" && v.Message.ExtendedTextMessage != nil {
				text = v.Message.ExtendedTextMessage.GetText()
			}

			if text != "" {
				timestamp := v.Info.Timestamp
				msg := fmt.Sprintf("[%s] %s: %s",
					timestamp.Format("02.01.2006 15:04"),
					sender,
					text,
				)
				lastMessages = append(lastMessages, msg)
				fmt.Println("üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg)
			}

		case *events.HistorySync:
			fmt.Println("üìö –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤")
			// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏
		}
	})

	// –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥
	if client.Store.ID == nil {
		qrChan, _ := client.GetQRChannel(context.Background())
		err = client.Connect()
		if err != nil {
			panic(err)
		}

		fmt.Println("–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –≤ WhatsApp:")
		for evt := range qrChan {
			if evt.Event == "code" {
				qrterminal.GenerateHalfBlock(evt.Code, qrterminal.L, os.Stdout)
			} else {
				fmt.Println("–°–æ–±—ã—Ç–∏–µ:", evt.Event)
			}
		}
	} else {
		// –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
		err = client.Connect()
		if err != nil {
			panic(err)
		}
		fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WhatsApp!")
	}

	// –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	fmt.Println("–ñ–¥—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
	time.Sleep(5 * time.Second)

	// –ù–ê–°–¢–†–û–ô –¢–£–¢:
	phoneNumber := "994516995516" // –ù–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã + –Ω–æ–º–µ—Ä (–±–µ–∑ +)
	message := "–ü—Ä–∏–≤–µ—Ç —Å Linux —Å–µ—Ä–≤–µ—Ä–∞! üê±"

	// –§–æ—Ä–º–∏—Ä—É–µ–º JID (WhatsApp ID)
	recipientJID := types.NewJID(phoneNumber, types.DefaultUserServer)

	// –í—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	fmt.Println("\nüì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫...")
	if len(lastMessages) > 0 {
		fmt.Println("\n--- –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---")
		for i, msg := range lastMessages {
			fmt.Printf("\n%d) %s\n", i+1, msg)
		}
		fmt.Println("---------------------------\n")
	} else {
		fmt.Println("‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
	}

	// –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
	fmt.Println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")

	resp, err := client.SendMessage(context.Background(), recipientJID, &waProto.Message{
		Conversation: proto.String(message),
	})

	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err)
	} else {
		fmt.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: %s\n", resp.ID)
	}

	// –ñ–¥—ë–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
	fmt.Println("\nüëÇ –°–ª—É—à–∞—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(10 * time.Second)

	fmt.Println("\n–û—Ç–∫–ª—é—á–∞—é—Å—å...")
	client.Disconnect()
}
